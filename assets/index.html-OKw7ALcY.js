import{_ as t,r as p,o as i,c as l,a as n,b as a,d as e,e as o}from"./app-OpayJ0oI.js";const c="/assets/spring-initializr-web-Is5z4zGO.png",r={},u=o('<h1 id="java-学习日志" tabindex="-1"><a class="header-anchor" href="#java-学习日志" aria-hidden="true">#</a> Java 学习日志</h1><h2 id="java-安装" tabindex="-1"><a class="header-anchor" href="#java-安装" aria-hidden="true">#</a> Java 安装</h2><p>JDK(Java Development Kit) 是 Java 语言的软件开发工具包(SDK)</p><ul><li><strong>Java SE</strong> ： standard edition，标准版。包含了基础和核心的库，可用于控制台及桌面应用软件的开发。</li><li><strong>Java EE</strong> ： enterprise edition，企业版。主要用于企业级分布式网络应用的开发。</li><li><strong>Java ME</strong> ： micro edition，微型版。主要用于嵌入式设备和移动设备上的应用开发。</li></ul>',4),d={href:"https://www.oracle.com/java/technologies/downloads",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.oracle.com/java/technologies/downloads/archive/",target:"_blank",rel:"noopener noreferrer"},k=o(`<h3 id="java-配置环境" tabindex="-1"><a class="header-anchor" href="#java-配置环境" aria-hidden="true">#</a> Java 配置环境</h3><h4 id="linux-macos-下环境配置" tabindex="-1"><a class="header-anchor" href="#linux-macos-下环境配置" aria-hidden="true">#</a> Linux/MacOS 下环境配置</h4><p>Linux 下编辑用户级的环境变量文件 <code>~/.bashrc</code> ， MacOS下下编辑用户级的环境变量文件 <code>~/.zshrc</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># EX: export JAVA_HOME=&quot;/usr/lib/jvm/jdk-17&quot;</span>
<span class="token comment"># EX: export JAVA_HOME=&quot;$HOME/program/jdk-21.0.1.jdk/Contents/Home&quot;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span><span class="token operator">&lt;</span>path_to_your_jdk_path<span class="token operator">&gt;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">\${JAVA_HOME}</span>/bin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="windows-下环境配置" tabindex="-1"><a class="header-anchor" href="#windows-下环境配置" aria-hidden="true">#</a> Windows 下环境配置</h4><ul><li><code>JAVA_HOME</code> : <code>...\\Java\\jdk-11.0.9</code> jdk的安装目录</li><li><code>CLASSPATH</code> : <code>%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar</code> (JDK1.5以上可以不用配置CLASSPATH变量)</li><li>添加到Path <ul><li><code>%JAVA_HOME%\\bin</code></li><li><code>%JAVA_HOME%\\jre\\bin</code></li></ul></li></ul><p>测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span>
javac
<span class="token function">java</span> <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maven-安装" tabindex="-1"><a class="header-anchor" href="#maven-安装" aria-hidden="true">#</a> Maven 安装</h3>`,9),m={href:"https://maven.apache.org",target:"_blank",rel:"noopener noreferrer"},b=n("blockquote",null,[n("p",null,[a("可以通过软件包管理器来安装：MacOS (Homebrew) "),n("code",null,"brew install maven"),a("、 Ubuntu (apt) "),n("code",null,"sudo apt-get install maven"),a(" 。 Windows(Chocolatey) 运行 "),n("code",null,"choco install maven"),a(" 。")])],-1),h=n("h3",{id:"gradle",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gradle","aria-hidden":"true"},"#"),a(" Gradle")],-1),g={href:"https://gradle.org",target:"_blank",rel:"noopener noreferrer"},f=n("h3",{id:"插件安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#插件安装","aria-hidden":"true"},"#"),a(" 插件安装")],-1),j={href:"https://github.com/redhat-developer/vscode-java/wiki/JDK-Requirements#java.configuration.runtimes",target:"_blank",rel:"noopener noreferrer"},_=o(`<p>配置不同版本的java</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;java.configuration.runtimes&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JavaSE-1.8&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/path/to/jdk-8&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JavaSE-11&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/path/to/jdk-11&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;JavaSE-16&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/path/to/jdk-16&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;default&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),w={href:"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug",target:"_blank",rel:"noopener noreferrer"},q={href:"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven",target:"_blank",rel:"noopener noreferrer"},x={href:"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test",target:"_blank",rel:"noopener noreferrer"},y={href:"https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency",target:"_blank",rel:"noopener noreferrer"},S=o(`<h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p>settings.json</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;java.home&quot;</span><span class="token operator">:</span> <span class="token string">&quot;path-to-your-jdk&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="java-程序执行过程" tabindex="-1"><a class="header-anchor" href="#java-程序执行过程" aria-hidden="true">#</a> Java 程序执行过程</h2><p>Java 程序执行过程如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>.java <span class="token punctuation">(</span>源文件<span class="token punctuation">)</span>
  ↓ 编译 javac hello.java
.class <span class="token punctuation">(</span>字节码文件<span class="token punctuation">)</span>
  ↓ 执行 <span class="token function">java</span> HelloWorld
JVM <span class="token punctuation">(</span>Java 虚拟机<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建 <code>hello.java</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>javac</code> 编译 <code>hello.java</code> 生成「<strong>字节码文件</strong>」 <code>hello.class</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>javac hello.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>java</code> 运行 <code>hello.class</code> 得到输出</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> HelloWorld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="简单的-springboot-项目" tabindex="-1"><a class="header-anchor" href="#简单的-springboot-项目" aria-hidden="true">#</a> 简单的 SpringBoot 项目</h2><h3 id="spring-initializr-初始化应用程序" tabindex="-1"><a class="header-anchor" href="#spring-initializr-初始化应用程序" aria-hidden="true">#</a> Spring Initializr 初始化应用程序</h3><p><img src="`+c+'" alt="Spring Initializr"></p>',15),A={href:"https://start.spring.io",target:"_blank",rel:"noopener noreferrer"},J=o(`<ul><li>Project: 构建工具，选 Maven，Gradle 比较新，但是 Maven 更加主流、成熟</li><li>Language: 语言，选 Java</li><li>Spring Boot: 版本</li><li>Project Metadata: 项目元数据 <ul><li>Group: 组名， <code>com.example</code></li><li>Artifact:项目名， demo</li><li>Name:demo</li><li>Description:Demo project for Spring Boot</li><li>Package name:<code>com.example.demo</code></li><li>Packaging:Jar</li><li>Java:17</li></ul></li><li>Dependencies: 选择项目的附加依赖，添加 Web 依赖：Spring Web、Spring Boot DevTools</li></ul><blockquote><p>同样的可以在 VScode 里快速创建，后续如果需要添加依赖，可以在 <code>pom.xml</code> 中添加依赖，然后在 VScode 中右键点击 <code>pom.xml</code> ，选择 <code>Add Maven Projects</code> ，即可添加依赖。</p></blockquote><p>目录结构如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-<span class="token operator">&gt;</span> % tree
<span class="token builtin class-name">.</span>
├── HELP.md
├── mvnw
├── mvnw.cmd
├── pom.xml
└── src
    ├── main
    │   ├── java/com/example/demo
    │   │   └── DemoApplication.java
    │   └── resources
    │       └── application.properties
    └── test/java/com/example/demo
        └── DemoApplicationTests.java

<span class="token number">13</span> directories, <span class="token number">7</span> files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>src/main/java</code> 为项目的主要逻辑代码，<code>DemoApplication.java</code> 为项目入口文件</li><li><code>src/main/resources</code> 为项目的资源文件，<code>application.properties</code> 为项目的配置文件</li><li><code>src/test/java</code> 为项目的测试代码，<code>DemoApplicationTests.java</code> 为项目的测试入口文件</li></ul><p>启动项目，进入项目文件夹 <code>demo</code> ，执行（或者在 VSCode 中点击 main 函数上的 <code>run</code> ）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn spring-boot:run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>spring-boot 在这里并不是项目名称。在 <code>mvn spring-boot:run</code> 命令中，spring-boot是Maven插件的一部分，而run是该插件的一个目标</p></blockquote><p>启动成功后，访问 <code>http://localhost:8080</code> ，看到 <code>Whitelabel Error Page</code> 项目启动成功，整个过程不需要关心任何配置，相比 SpringMVC 更加简洁，这就是 SpringBoot <strong>「约定大于配置」</strong> 的强大之处，它让开发者能快速进入工程</p><p><code>DemoApplication.java</code> 内容如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@SpringBootApplication</code> 负责启动引导应用程序，该注解包含了三个注解 <ul><li><code>@Configuration</code>：标记类为应用程序上下文的Bean定义的源。</li><li><code>@EnableAutoConfiguration</code>：告诉Spring Boot根据添加的jar依赖自动配置你的Spring应用。</li><li><code>@ComponentScan</code>：让Spring去寻找其他组件、配置和服务，自动扫描包以找到其他的Spring组件。</li></ul></li><li><code>SpringApplication.run(DemoApplication.class, args);</code> 启动引导应用程序，<code>DemoApplication.class</code> 为项目入口文件，<code>args</code> 为启动参数</li></ul><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> hello world</h3>`,13),H={href:"https://github.com/dromara/hutool",target:"_blank",rel:"noopener noreferrer"},M=o(`<p>添加一个 <code>sayHello</code> 方法，访问 <code>http://localhost:8080</code> ，看到 <code>Hello, World!</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StrUtil</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@RestController</span> <span class="token comment">// 使得该类中的方法可以响应 HTTP 请求</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;who&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> who<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>who<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			who <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, {}!&quot;</span><span class="token punctuation">,</span> who<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改端口号" tabindex="-1"><a class="header-anchor" href="#修改端口号" aria-hidden="true">#</a> 修改端口号</h3><p>修改默认端口号，修改 <code>application.properties</code> 文件，并重启项目</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你使用的是 <code>application.yml</code> 文件，修改如下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,7);function E(D,V){const s=p("ExternalLinkIcon");return i(),l("div",null,[u,n("p",null,[n("a",d,[a("JDK Development Kit"),e(s)])]),n("p",null,[n("a",v,[a("Java"),e(s)])]),k,n("p",null,[a("按照 "),n("a",m,[a("maven.apache.org"),e(s)]),a(" 上的说明先进行安装")]),b,h,n("p",null,[a("按照 "),n("a",g,[a("gradle.org"),e(s)]),a(" 上的说明进行安装。")]),f,n("ul",null,[n("li",null,[n("a",j,[a("Language Support for Java"),e(s)])])]),_,n("ul",null,[n("li",null,[n("p",null,[n("a",w,[a("Debugger for Java"),e(s)])])]),n("li",null,[n("p",null,[n("a",q,[a("Maven for Java"),e(s)])])]),n("li",null,[n("p",null,[n("a",x,[a("Test Runner for Java"),e(s)])])]),n("li",null,[n("p",null,[n("a",y,[a("Project Manager for Java"),e(s)])])])]),S,n("p",null,[a("访问 "),n("a",A,[a("Spring Initializr"),e(s)]),a(" 官网，设置项目参数:")]),J,n("blockquote",null,[n("p",null,[a("这里添加了一个依赖 "),n("a",H,[a("Hutool"),e(s)]),a(" ，")])]),M])}const P=t(r,[["render",E],["__file","index.html.vue"]]);export{P as default};
